= Config Logic

Config Logic is a configuration management tool for Ruby/Rails applications. It
wraps any set of config files in a managed access layer which supports

* caching
* multi argument, hash style, or dot style access
* multi config overlays
* dynamic or static multiplexing of config branches


== Requirements

The following gems will be installed along with config_logic

* activesupport (2.2.2+)
* buffered_logger (0.1.2+)


== Installation

  gem install config_logic


== Usage

Imagine that your application has a config directory with the following layout

  config -->

      /config_prod.yml -->

          { :key1 => 1, 
            :key2 => 2, 
            :key3 => 3 }

      /config_dev.yml -->

          { :key1 => 11, 
            :key2 => 12, 
            :key3 => 13 }

    /dir1 -->

        /config1.yml -->

          { :key1 => 1, 
            :key2 => 2, 
            :key3 => 3 }

    /dir2 -->

        /config2.yml -->

          { :key4 => 4, 
            :key5 => 5, 
            :key6 => 6 }


=== Initialization

  c = ConfigLogic.new('path/to/config/dir')


=== Rebuilding the Config Cache

  c.reload!


=== Data Access

  c.config.key1        => 1
  c[:config][:key1]    => 1
  c['config']['key1']  => 1
  c(:config, :key1)    => 1
  c('config', 'key1')  => 1


=== Applying Overlays

  c = ConfigLogic.new('path/to/config/dir', :overlays => [ { :name => 'config',
                                                             :inputs => [:config_prod, :config_dev] } ] )
  c.config.key1 => 11
  c.config.key2 => 12
  c.config.key3 => 13


=== Applying Multiplexers

  c = ConfigLogic.new('path/to/config/dir', :multiplexers => [ { :name => 'key',
                                                                 :selector => Proc.new {1 + 1 },
                                                                 :inputs => {1 => :key1, 2 => :key2, 3 => :key3} } ] )
  c.config.key => 2


== Credits

Inspired by RConfig (Rahmal Conda) / activeconfig (Enova Financial)
